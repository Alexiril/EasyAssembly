Pony!

struct DLListNode
	int data
	int next_ptr
	int prev_ptr

[value, head] 
func DLListAppend // => [head]
	new DLListNode -> newNode

	value -> DLListNode newNode.data
	head -> DLListNode newNode.prev_ptr
	null -> DLListNode newNode.next_ptr

	jump if head = null to end

	newNode -> DLListNode head.next_ptr

	end:
	newNode -> head

	return head

[head]
func DLListPull // => [head, data]
	jump if head = null to end

	DLListNode head.prev_ptr -> previous
	DLListNode head.data -> data

	jump if previous = null to end

	null -> DLListNode previous.next_ptr

	delete head

	previous -> head

	end:

	return head, data

[head]
func DLListSize // => [size]
	
	jump if head = null to end

	1 -> size

	loopHead:
	
	DLListNode head.prev_ptr -> head
	jump if head = null to end

	inc size

	jump if DLListNode head.prev_ptr != null to loopHead

	end:
	return size

[index, head]
func DLListRemoveAt // => [head, data]

	0 -> data

	jump if index != 0 to indexNotZero

	call DLListPull(head) [head, data]
	jump to end

	indexNotZero:
	head -> pointer
	0 -> counter

	loopHead:
	jump if pointer = null to end

	DLListNode pointer.prev_ptr -> pointer

	inc counter
	jump if counter < index to loopHead

	DLListNode pointer.data -> data
	DLListNode pointer.prev_ptr -> previous
	DLListNode pointer.next_ptr -> next

	jump if previous = null to newNode

	next -> DLListNode previous.next_ptr

	newNode:
	jump if next = null to end
	previous -> DLListNode next.prev_ptr

	end:
	return head, data

[index, head]
func DLListGetAt // => [value]
	head -> value
	0 -> counter

	jump if index = 0 to end

	loopHead:
	jump if value = null to end

	DLListNode value.prev_ptr -> value

	inc counter

	jump if counter < index to loopHead

	end:
	return value

[value, index, head]
func DLListInsert // => [head]
	call DLListGetAt(index, head) [node]

	jump if node = null to end

	new DLListNode -> newNode

	value -> DLListNode newNode.data
	node -> DLListNode newNode.prev_ptr
	DLListNode node.next_ptr -> DLListNode newNode.next_ptr

	newNode -> DLListNode node.next_ptr
	DLListNode newNode.next_ptr -> next

	jump if next = null to end
	newNode -> DLListNode next.prev_ptr

	end:
	return head

[head]
func DLListClear // => [null pointer]
	call DLListSize(head) [size]
	jump if size = 0 to end
	size -> counter

	loopHead:
	call DLListPull(head) [head, _]

	dec counter
	jump if counter > 0 to loopHead

	end:
	push null