Pony!

struct DLListNode
	int data
	int next_ptr
	int prev_ptr

// [value, head] => [head]
func DLListAppend

	pull head
	pull value

	new DLListNode -> newNode

	value -> DLListNode newNode.data
	head -> DLListNode newNode.prev_ptr
	0 -> DLListNode newNode.next_ptr

	jump if head = 0 to end

	newNode -> DLListNode head.next_ptr

	end:

	newNode -> head

	push head

// [head] => [head, data]
func DLListPull

	pull head

	jump if head = 0 to end

	DLListNode head.prev_ptr -> previous
	DLListNode head.data -> data

	jump if previous = 0 to end

	0 -> DLListNode previous.next_ptr

	delete head

	previous -> head

	end:

	push data
	push head

// [head] => [size]
func DLListSize

	pull head
	
	jump if head = 0 to end

	1 -> size

	loopHead:
	
	DLListNode head.prev_ptr -> head
	jump if head = 0 to end

	inc size

	jump if DLListNode head.prev_ptr != 0 to loopHead

	end:
	push size

// [index, head] => [head, data]
func DLListRemoveAt

	0 -> data

	pull head
	pull index

	jump if index != 0 to indexNotZero

	push head

	call DLListPull

	pull head
	pull data

	jump to end
	indexNotZero:

	head -> pointer
	0 -> counter

	loopHead:

	jump if pointer = 0 to end

	DLListNode pointer.prev_ptr -> pointer

	inc counter

	jump if counter < index to loopHead

	DLListNode pointer.data -> data
	DLListNode pointer.prev_ptr -> previous
	DLListNode pointer.next_ptr -> next

	jump if previous = 0 to newNode

	next -> DLListNode previous.next_ptr

	newNode:

	jump if next = 0 to end

	previous -> DLListNode next.prev_ptr

	end:

	push data
	push head

// [index, head] => [value]
func DLListGetAt

	pull head
	pull index

	head -> value
	0 -> counter

	jump if index = 0 to end

	loopHead:

	jump if value = 0 to end

	DLListNode value.prev_ptr -> value

	inc counter

	jump if counter < index to loopHead

	end:

	push value

// [value, index, head] => [head]
func DLListInsert

	pull head
	pull index
	pull value

	push index
	push head

	call DLListGetAt

	pull node

	jump if node = 0 to end

	new DLListNode -> newNode

	value -> DLListNode newNode.data
	node -> DLListNode newNode.prev_ptr
	DLListNode node.next_ptr -> DLListNode newNode.next_ptr

	newNode -> DLListNode node.next_ptr
	DLListNode newNode.next_ptr -> next

	jump if next = 0 to end

	newNode -> DLListNode next.prev_ptr

	end:
	push head

// [head] => [null pointer]
func DLListClear

	pull head

	push head
	call DLListSize
	pull size

	size -> counter

	loopHead:

	push head
	call DLListPull
	pull head
	pull _

	dec counter
	jump if counter > 0 to loopHead

	push 0